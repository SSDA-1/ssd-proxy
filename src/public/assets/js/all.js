$(function () { $(document).on("click", ".mobile_menu_container .parent", function (e) { e.preventDefault(); $(".mobile_menu_container .activity").removeClass("activity"); $(this).siblings("ul").addClass("loaded").addClass("activity") }); $(document).on("click", ".mobile_menu_container .back", function (e) { e.preventDefault(); $(".mobile_menu_container .activity").removeClass("activity"); $(this).parent().parent().removeClass("loaded"); $(this).parent().parent().parent().parent().addClass("activity") }); $(document).on("click", ".mobile_menu", function (e) { e.preventDefault(); $(".mobile_menu_container").addClass("loaded"); $(".mobile_menu_overlay").fadeIn() }); $(document).on("click", ".mobile_menu_overlay", function (e) { $(".mobile_menu_container").removeClass("loaded"); $(this).fadeOut(function () { $(".mobile_menu_container .loaded").removeClass("loaded"); $(".mobile_menu_container .activity").removeClass("activity") }) }) }); function openModal(a, b, c) { const modal = document.querySelector('.modal.notifications'); if (!modal) return; const titleElem = modal.querySelector('.title'); const massageElem = modal.querySelector('.massage'); if (titleElem) titleElem.textContent = a; if (massageElem) massageElem.textContent = b; modal.classList.add("active"); const overlay = document.querySelector('.js-overlay-modal'); if (overlay) overlay.classList.add("active"); const elements = document.querySelectorAll('.fa.fa-exclamation-triangle'); elements.forEach(element => { element.style.display = 'inline-block' }); const textWrap = modal.querySelector('.textWrap'); const buttonFormWrap = modal.querySelector('.buttonFormWrap'); if (c && c !== 'process') { textWrap.classList.add("done") } else if (c !== 'process') { textWrap.classList.add("error"); buttonFormWrap.style.display = 'flex' } else if (c === false) { textWrap.classList.add("error"); if (massageElem) massageElem.textContent = b } else { elements.forEach(element => { element.style.display = 'none' }); buttonFormWrap.style.display = 'none' } if (a === 'Покупка') { const loadingElement = document.createElement('div'); loadingElement.setAttribute('class', 'loadingProcess'); loadingElement.setAttribute('style', 'width: 50px;'); loadingElement.innerHTML = `<span class="buy-timer"><img src="/assets/img/buy-timer.gif"alt="Loading..."></span>`; textWrap.appendChild(loadingElement) } } function openModalChecker(a, b) { const amountElem = document.querySelector('.modal.crypt #amountUSDTChecker'); const addressElem = document.querySelector('.modal.crypt #addressUSDTChecker'); if (amountElem) { amountElem.textContent = a.amount_for_pay } if (addressElem) { addressElem.textContent = a.wallet } const modal = document.querySelector('.modal.crypt'); if (modal) modal.classList.add("active"); new QRCode(document.querySelector('.qrCode'), { text: a.wallet, width: 128, height: 128, colorDark: '#000000', colorLight: '#ffffff', correctLevel: QRCode.CorrectLevel.H }); const intervalId = setInterval(async () => { try { const response = await fetch('/usdtchecker/check/' + b); const responseData = await response.json(); if (responseData.success === true) { clearInterval(intervalId); const doneElem = document.querySelector('.modal.crypt .done'); if (doneElem) doneElem.classList.add("active") } } catch (error) { console.error('Error checking USDT:', error) } }, 2000) } document.addEventListener("click", function (e) { if (e.target.classList.contains('background') || e.target.classList.contains('closeModal')) { const modal = document.querySelector('.modal'); if (modal) modal.classList.remove("active"); const extendModal = document.querySelector('.modal.extend'); if (extendModal) extendModal.classList.remove("active") } }); const ajaxSend = async (formData, formAction) => { try { const fetchResp = await fetch(formAction, { headers: { "X-Requested-With": "XMLHttpRequest", "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute('content') }, method: 'POST', body: formData }); if (!fetchResp.ok) { throw new Error(`Ошибкапоадресу,статусошибки${fetchResp.status}`) } return await fetchResp.text() } catch (error) { console.error('Error sending AJAX request:', error); throw error; } }; document.addEventListener('DOMContentLoaded', () => { let buysCheck = 0; const forms = document.querySelectorAll('form'); forms.forEach(form => { form.addEventListener('submit', function (e) { const fetchTorF = this.dataset.fetch; if (fetchTorF !== 'none') { e.preventDefault(); const formData = new FormData(this); const formAction = this.getAttribute('action'); const formGetting = this.getAttribute('data-getting'); if (formAction) { if (formGetting === 'buy') { openModal('Покупка', '', 'process') } ajaxSend(formData, formAction).then((response) => { const data = JSON.parse(response); if (data.tut) { const rotationAllText = form.querySelector('.textWrap .massage p'); const rotationAllBtn = form.querySelector('.buttonFormWrap'); const rotationAllBtnOld = rotationAllBtn.cloneNode(true); rotationAllText.textContent = data.tut; rotationAllBtn.remove(); setTimeout(() => { form.appendChild(rotationAllBtnOld) }, 1000) } if (document.querySelector('.loadingProcess')) { document.querySelector('.loadingProcess').remove(); if (data.status === false) { openModal('Покупка не завершена', data.massage, data.status) } } if (data.errors && data.errors.telegram_chat_id) { const errorTgElem = document.querySelector('.error-tg'); if (errorTgElem) { errorTgElem.innerHTML = data.errors.telegram_chat_id[0] === 'The telegram chat id must be a number.' ? 'Внимательно прочтите инструкцию выше!<br>Тут должен быть ChatID а не ваш НИК!' : '' } } const noticesElem = form.querySelector('.notices'); if (noticesElem) noticesElem.classList.add('done'); form.reset(); if (data.url) { window.location.replace(data.url) } if (data.data && data.data.location !== undefined) { window.location.replace(data.data.location) } if (data.operation === 'sending') { const sendTextarea = document.querySelector('.sendTextarea'); const sendContent = document.querySelector('.sendContent'); if (sendTextarea) sendTextarea.value = ''; if (sendContent) sendContent.innerHTML = '' } if (data.operation === 'payment') { const historyOp = document.createElement('div'); historyOp.setAttribute("class", "block-history"); const elemAfter = document.querySelector('.title-balance-history'); historyOp.innerHTML = `<div class="history-date">${data.date}</div><div class="sum">+${data.amount}рублей</div>`; if (elemAfter) elemAfter.parentNode.insertBefore(historyOp, elemAfter.nextSibling) } if (data.filesettingssite === 'icon') { const iconFile = document.getElementById('iconFile'); if (iconFile) iconFile.remove(); const iconElem = document.querySelector('[data-type="icon"]'); if (iconElem) iconElem.remove() } else if (data.filesettingssite === 'logo') { const logoFile = document.getElementById('logoFile'); if (logoFile) logoFile.remove(); const logoElem = document.querySelector('[data-modal="del"]'); if (logoElem) logoElem.remove() } if (data.modal) { if (data.status === true) { buysCheck = 1; const extendModal = document.querySelector('.modal.extend'); if (extendModal) extendModal.classList.remove("active"); openModal(data.title, data.massage, data.status); if (data.massage === 'Прокси успешно приобретён и добавлен в ваш профиль') { setTimeout(() => { const timestamp = new Date().getTime(); window.location.href = `/control-panel?timestamp=${timestamp}` }, 3000) } else if (data.massage === 'Автопродление включено') { const autorenewalModal = document.querySelector('.modal.autorenewal'); if (autorenewalModal) autorenewalModal.classList.remove("active"); const proxyElem = document.getElementById(`proxy${data.id}`); if (proxyElem) proxyElem.querySelector('.autopayButt').classList.add('active') } } else if (data.status === false) { openModal('Покупка не завершена', data.massage, data.status) } if (data.operation === 'usdtchecker') { const doneElem = document.querySelector('.modal.crypt .done'); if (doneElem) doneElem.classList.remove("active"); openModalChecker(data.data, data.data.idtransaction) } } }).catch((err) => console.error('Error processing form submission:', err)) } } }) }) });
